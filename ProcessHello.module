<?php

/**
 * Hello Process Module
 *
 * A starting point skeleton from which to build your own Process module. 
 * Process modules are used primarily for building admin applications and tools.
 * This module also creates a page in the ProcessWire admin to run itself from.
 * 
 * How to use this to make your own Process module:
 *
 * 1. Rename the ProcessHello.module file to be Process[YourModuleName].module
 * 2. Change the class name to be Process[YourModuleName]
 * 3. Change the "const pageName" line at the top of the class to be your unique admin page name.
 * 4. Modify and add to this module to make it do what you want. 
 * 5. If your module needs its own CSS and/or JS files, rename those included to be the same as 
 *    your module name and modify them to do whatever you want. If your module does NOT need 
 *    CSS and/or JS files then delete them. 
 * 6. Change all the text here to describe your module and update the README.md file.
 * 7. Change the copyright line directly below to have your information.
 * 8. When ready, post your module to GitHub and to modules.processwire.com!
 *
 * Copyright [year] by [your name]
 *
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessHello extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(

			// Your module's title
			'title' => 'Hello: Process Module Example', 

			// A 1 sentence description of what your module does
			'summary' => 'A starting point module skeleton from which to build your own Process module.', 
	
			// Module version number: use 1 for 0.0.1 or 100 for 1.0.0, and so on
			'version' => 1, 

			// Name of person who created this module (change to your name)
			'author' => 'Ryan Cramer', 

			// URL to more info: change to your full modules.processwire.com URL (if available), or something else if you prefer
			'href' => 'http://modules.processwire.com/', 

			// name of permission required of users to execute this Process (optional)
			'permission' => 'page-edit', 
			); 
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 * It should be unique and the same (or similar) to the module name, but all lowercase.
	 * It should not be the same as any other ProcessWire admin page name.
	 *
	 */
	const pageName = 'hello';

	/**
	 * This is an optional initialization function called before any execute functions.
	 *
	 */
	public function init() {
		parent::init(); // required
	}

	/**
	 * This function is executed when a page with your Process assigned is accessed. 
 	 *
	 * This can be seen as your main or index function. You'll probably want to replace
	 * everything in this function. 
	 *
	 */
	public function ___execute() {

		$this->message("This is an example of a message"); 
		$this->error("This is an example of a warning or error"); 
		$this->message("This is an example of a debug notice, only shown when debug mode is on", Notice::debug); 

		// generate some navigation
		$out = <<< _OUT

		<h2>Welcome</h2>

		<dl class='nav'>
			<dt><a href='./something/'>Do Something</a></dt>
			<dd>Runs the executeSomething() function.</dd>
		</dl>
_OUT;

		return $out;
	}	

	/**
	 * Called when the URL is this module's page URL + "/something/"
	 *
	 */
	public function ___executeSomething() {

		// set a new headline, replacing the one used by our page (optional)
		Wire::setFuel('processHeadline', 'This is something!'); 

		// add a breadcrumb that returns to our main page 
		$this->breadcrumbs->add(new Breadcrumb('../', 'Hello')); 

		return "<h2>Not much to to see here</h2><p><a href='../'>Go Back</a></p>";
	}

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned. 
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName; 

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this; 

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}"); 
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed. 
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this); 
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName); 

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}"); 
			$page->delete();
		}
	}
	
}

